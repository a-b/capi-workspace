#!/usr/bin/env ruby

require 'yaml'
require 'open3'
require 'date'

input_file = ARGV[0]

def find_certs(value, path, found_certs)
  if value.is_a?(Array)
    value.each_with_index {|v, i| find_certs(v, path + [i.to_s], found_certs) }
  elsif value.is_a?(Hash)
    value.each { |k, v| find_certs(v, path + [k], found_certs) }
  elsif value.to_s["BEGIN CERTIFICATE"]
    found_certs[path.join('.')] = value
  else
    nil
  end
end

certs = YAML::load(File.open(input_file))

found_certs = {}
find_certs(certs, [], found_certs)

status = 0
found_certs.each do |k, cert|
  #puts "CERTIFICATE START"
  puts k
  #puts cert
  #puts "CERTIFICATE END"
  stdin, stdout, stderr = Open3.popen3('openssl x509 -text')

  stdin.puts cert
  stdin.close

  output = stdout.read
  errors = stderr.read

  if errors.size > 0
    puts "Error in cert: #{errors}"
    next
  end
  validity_index = output.index("Validity")
  if !validity_index
    puts "Error in cert: no validity section #(output)"
    next
  end
  date_before = output[validity_index..validity_index+120].match(/Not Before\s*:\s*(.*)$/)
  date_after = output[validity_index..validity_index+120].match(/Not After\s*:\s*(.*)$/)
  if Date.parse(date_before[1]) > Date.today
    puts "!! Cert #{k} isn't ready yet"
    status = 1
  end
  if Date.parse(date_after[1]) < Date.today
    puts "!! Cert #{k} has expired"
    status = 1
  end
  puts date_before
  puts date_after

  # puts "*** output: #{output}"

end

exit status
